<%- include('../includes/flash.ejs') %>

    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Easy Buy || Sign Up</title>
        <style>
            /* Full-screen animated background */

            body {
                width: 100vw;
                height: 100vh;
                margin: 0;
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                font-family: Arial, sans-serif;
                color: #fff;
                /* overflow: hidden; */
                background-color: #111;
                /* Dark background for the body */
            }

            /* Canvas for animated background */
            #background-canvas {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                z-index: 1;
            }

            /* Container for forms */
            .form-container {
                position: relative;
                z-index: 2;
                background: rgba(0, 0, 0, 0.7);
                padding: 40px;
                border-radius: 10px;
                box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
                max-width: 400px;
                text-align: center;
                opacity: 0;
                transform: translateY(20px);
                transition: opacity 0.5s ease, transform 0.5s ease;
            }

            /* Show the form */
            .form-container.show {
                opacity: 1;
                transform: translateY(0);
            }

            .form-container h1 {
                font-size: 2.5em;
                margin-bottom: 10px;
            }

            .form-container p {
                margin-bottom: 20px;
            }

            /* Form styling */
            .form {
                display: flex;
                flex-direction: column;
            }

            .form input {
                padding: 15px;
                margin: 10px 0;
                border: none;
                border-radius: 5px;
                font-size: 1em;
                background-color: #222;
                /* Dark background for input fields */
                color: #fff;
                /* White text for input fields */
                transition: border 0.3s, background-color 0.3s;
            }

            .form input:focus {
                outline: none;
                border: 2px solid #42e695;
                background-color: #333;
                /* Darker background on focus */
            }

            .form-button {
                padding: 15px;
                background: #ff6ec4;
                color: #fff;
                border: none;
                border-radius: 5px;
                font-size: 1.1em;
                cursor: pointer;
                transition: background 0.3s;
            }

            .form-button:hover {
                background: #ff3b81;
            }

            .toggle-text {
                margin-top: 15px;
                font-size: 0.9em;
            }

            .toggle-text a {
                color: #42e695;
                text-decoration: none;
            }

            .toggle-text a:hover {
                text-decoration: underline;
            }

            /* Fade-in animation for text */
            @keyframes fadeIn {
                0% {
                    opacity: 0;
                    transform: translateY(-20px);
                }

                100% {
                    opacity: 1;
                    transform: translateY(0);
                }
            }

            .flashMsg {
                position: absolute;
                top: 20px;
                right: 0;
                z-index: 100;
                padding: 0 1rem;
                background-color: rgba(81, 220, 220, 0.841);
                color: #fff;
                border-radius: 0.125rem;
                /* display: none; */
            }
        </style>
    </head>

    <body>



        <!-- Canvas for animated background -->
        <canvas id="background-canvas"></canvas>

        <!-- Form Container -->


        <div class="form-container" id="formContainer">

            <h1 id="formTitle">Welcome Back</h1>
            <p id="formSubtitle">Please log in to continue.</p>
            <form id="form" class="form">
                <div id="formInputs" style="display: flex; flex-direction: column;">
                    <input type="email" name="email" placeholder="email" required>
                    <input type="password" name="password" placeholder="Password" required>
                </div>
                <button type="submit" class="form-button">Log In</button>
                <p class="toggle-text">Don't have an account? <a href="#" id="toggleForm">Register</a></p>
            </form>
        </div>
        <script>
            // Set up canvas for animated background
            function allCanvas() {
                const canvas = document.getElementById("background-canvas");
                const ctx = canvas.getContext("2d");

                // Set canvas dimensions
                function setCanvasSize() {
                    canvas.width = window.innerWidth;
                    canvas.height = window.innerHeight;
                }
                setCanvasSize();
                window.addEventListener('resize', setCanvasSize);

                // Wave properties
                const wave = {
                    y: canvas.height / 2,
                    amplitude: 30, // Amplitude of the wave
                    frequency: 0.02, // Frequency of the wave
                    phase: 0 // Phase shift of the wave
                };

                // Particle properties
                const particles = [];
                const colors = ['#ff6ec4', '#42e695', '#ff3b81', '#6c63ff', '#00c6ff'];

                class Particle {
                    constructor(x, y) {
                        this.x = x;
                        this.y = y;
                        this.size = Math.random() * 5 + 1;
                        this.speedX = Math.random() * 3 - 1.5;
                        this.speedY = Math.random() * 3 - 1.5;
                        this.color = colors[Math.floor(Math.random() * colors.length)];
                    }
                    update() {
                        this.x += this.speedX;
                        this.y += this.speedY;
                        if (this.size > 0.2) this.size -= 0.1; // Fade effect
                    }
                    draw() {
                        ctx.fillStyle = this.color;
                        ctx.beginPath();
                        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                        ctx.fill();
                    }
                }

                // Create particles on mouse move
                canvas.addEventListener('mousemove', (e) => {
                    const xPos = e.x;
                    const yPos = e.y;
                    for (let i = 0; i < 5; i++) {
                        particles.push(new Particle(xPos, yPos));
                    }
                });

                // Animation loop
                function animateBackground() {
                    ctx.clearRect(0, 0, canvas.width, canvas.height);

                    // Draw wave
                    ctx.beginPath();
                    for (let x = 0; x < canvas.width; x++) {
                        const y = wave.y + Math.sin(x * wave.frequency + wave.phase) * wave.amplitude;
                        ctx.lineTo(x, y);
                    }
                    ctx.lineWidth = 3; // Wave line width
                    ctx.strokeStyle = 'gray'; // Wave color
                    ctx.stroke();
                    wave.phase += 0.05; // Move the wave

                    // Draw particles
                    particles.forEach((particle, index) => {
                        particle.update();
                        particle.draw();
                        if (particle.size <= 0.2) {
                            particles.splice(index, 1); // Remove particles when small
                        }
                    });

                    requestAnimationFrame(animateBackground);
                }

                animateBackground();
            }

            allCanvas();
            // Toggle between login and registration forms
            const formContainer = document.getElementById("formContainer");
            const form = document.getElementById("form");
            const formTitle = document.getElementById("formTitle");
            const formSubtitle = document.getElementById("formSubtitle");
            const toggleFormLink = document.getElementById("toggleForm");
            const formInputs = document.getElementById("formInputs");

            toggleFormLink.addEventListener("click", (e) => {
                e.preventDefault();
                const isLogin = formTitle.innerText === "Welcome Back";

                // Apply fade out animation
                formContainer.classList.remove('show');
                setTimeout(() => {
                    // Update form text and inner HTML based on the current form
                    if (isLogin) {
                        formTitle.innerText = "Create Account";
                        formSubtitle.innerText = "Join us to explore amazing products.";
                        formInputs.innerHTML = `
                        <input type="text" name="username" placeholder="Username" required>
                        <input type="email" name="email" placeholder="Email" required>
                        <input type="password" name="password" placeholder="Password" required>
                        <input type="password" name="confirmPassword" placeholder="Confirm Password" required>
                    `;
                        document.querySelector('.toggle-text').innerHTML = `Already have an account? <a href="#" id="toggleForm">Log In</a>`
                        form.querySelector(".form-button").innerText = "Register";
                    } else {
                        formTitle.innerText = "Welcome Back";
                        formSubtitle.innerText = "Please log in to continue.";
                        formInputs.innerHTML = `
                        <input type="email" name="email" placeholder="Email" required>
                        <input type="password" name="password" placeholder="Password" required>
                    `;
                        form.querySelector(".form-button").innerText = "Log In";
                    }
                    // Apply fade-in animation
                    formContainer.classList.add('show');

                    // Re-attach the event listener for the toggle link
                    const newToggleFormLink = document.getElementById("toggleForm");
                    newToggleFormLink.addEventListener("click", (e) => {
                        e.preventDefault();
                        toggleFormLink.click(); // Trigger the click event again to toggle forms
                    });
                }, 500); // Delay to match fade-out time
            });

            form.addEventListener("submit", async (e) => {
                e.preventDefault(); // Prevent default form submission

                const isLogin = formTitle.innerText === "Welcome Back"; // Check if it's login form

                const formData = new FormData(form); // Get form data

                const url = isLogin ? '/CustomerLogin' : '/CustomerRegister'; // Determine the URL based on the form

                // Optional: Add an indication to the console
                console.log(`Submitting ${isLogin ? 'CustomerLogin' : 'CustomerRegister'} data:`, Object.fromEntries(formData));

                // console.log(formData); //this is empty
                console.log(form.name.value);
                console.log(url);
                form.action = 'loginSignup/' + url;
                form.method = 'POST';
                form.submit();

                // Fetch request to the server
                // try {
                //     const response = await fetch(url, {
                //         method: 'POST',
                //         body: formData,
                //     });

                //     if (!response.ok) {
                //         throw new Error(`HTTP error! status: ${response.status}`);
                //     }

                //     const result = await response.json();
                //     console.log(result); // Handle the response
                // } catch (error) {
                //     console.error('Error:', error);
                // }
            });

            // Initial show for form container
            setTimeout(() => {

                formContainer.classList.add('show');
            }, 100); // Delay before showing





        </script>
    </body>

    </html>